<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
	">

	<import resource="./springBatchContext.xml" />
	<import resource="./springBatchDatabase.xml" />
	<import resource="./applicationDatabase.xml" />

	<context:component-scan base-package="com.noaaServerSpringBatch" />
<!-- 	<aop:config proxy-target-class="true"/> -->

	<bean id="simpleRetryPolicy" class="org.springframework.retry.policy.SimpleRetryPolicy">
		<property name="maxAttempts" value="10" />
	</bean>
	<bean id="exponentialBackOffPolicy" class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
        <property name="initialInterval" value="3000"/>
        <property name="maxInterval" value="30000"/>
        <property name="multiplier" value="2.0"/>
    </bean>
	<bean id="retryLogger" class="com.noaaServerSpringBatch.listener.RetryLogger"/>
	<bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
		<property name="retryPolicy" ref="simpleRetryPolicy" />
		<property name="backOffPolicy" ref="exponentialBackOffPolicy" />
		<property name="listeners" ref="retryLogger" />
	</bean>
	<bean id="retryAdvice" class="org.springframework.retry.interceptor.RetryOperationsInterceptor">
		<property name="retryOperations" ref="retryTemplate" />
	</bean>
	
	<aop:config>
		<aop:pointcut id="retriedOperations" expression="execution(* com.noaaServerSpringBatch.service.MetarService.*(..))" />
		<aop:advisor pointcut-ref="retriedOperations" advice-ref="retryAdvice" />
	</aop:config>
	
	<bean id="decompressTasklet" class="com.noaaServerSpringBatch.tasklet.DecompressTasklet"
		scope="step">
	</bean>

	<bean id="metarTransformer" class="com.noaaServerSpringBatch.tasklet.MetarTransformer"
		scope="step">
	</bean>

	<bean id="truncateMetarTemp" class="com.noaaServerSpringBatch.tasklet.TruncateMetarTemp"
		scope="step">
	</bean>
	
	<bean id="metarListItemReader" class="org.springframework.batch.item.support.ListItemReader"
		scope="step">
		<constructor-arg index="0" value="#{jobExecutionContext['metarList']}" />
	</bean>

	<!-- MyBatis Spring batch writer for insertMetarTemp statement -->
	<bean id="insertMetarTempBatchWriter" class="org.mybatis.spring.batch.MyBatisBatchItemWriter">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="statementId" value="insertMetarTemp" />
		<property name="assertUpdates" value="false" />
	</bean>	
	
	<bean id="mergeMetar" class="com.noaaServerSpringBatch.tasklet.MergeMetar"
		scope="step">
	</bean>
	
	<batch:job id="metarDoanloadJob">
	  <batch:step id="decompressStep" next="metarTransformerStep">
		<batch:tasklet ref="decompressTasklet" transaction-manager="springBatchTransactionManager" />
	  </batch:step>
	  <batch:step id="metarTransformerStep" next="truncateMetarTempStep">
		<batch:tasklet ref="metarTransformer" transaction-manager="springBatchTransactionManager" />
	  </batch:step>
	  <batch:step id="truncateMetarTempStep" next="insertMetarTempBatchStep">
		<batch:tasklet ref="truncateMetarTemp" transaction-manager="springBatchTransactionManager" />
	  </batch:step>
	  <batch:step id="insertMetarTempBatchStep" next="mergeMetarStep">
		<batch:tasklet>
			<batch:chunk reader="metarListItemReader" writer="insertMetarTempBatchWriter"
				commit-interval="1000">
			</batch:chunk>
		</batch:tasklet>
	  </batch:step>
	  <batch:step id="mergeMetarStep">
		<batch:tasklet ref="mergeMetar" transaction-manager="springBatchTransactionManager" />
	  </batch:step>
	</batch:job>

</beans>